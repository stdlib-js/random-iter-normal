{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport noop from '@stdlib/utils-noop';\nimport copy from '@stdlib/utils-copy';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport MAX_VALUE from '@stdlib/constants-float64-max';\nimport { factory as rnorm } from '@stdlib/random-base-normal';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a normal distribution.\n*\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( -1.0, 3.0 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( mu, sigma, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number and not NaN. Value: `%s`.', mu ) );\n\t}\n\tif ( !isPositive( sigma ) ) {\n\t\tthrow new TypeError( format( '0Q07T', sigma ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0Q02h', options ) );\n\t\t}\n\t\topts = copy( options, 1 );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( '0Q035', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rnorm( mu, sigma, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rnorm( mu, sigma );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( mu, sigma, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterator;\n"],"names":["iterator","mu","sigma","options","opts","iter","rand","FLG","i","isNumber","isnan","TypeError","format","isPositive","arguments","length","isObject","copy","hasOwnProp","isNonNegativeInteger","MAX_VALUE","rnorm","prng","state","setReadOnly","next","end","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","PRNG","iteratorSymbol","factory","done","value","seed","seedLength","stateLength","byteLength","s"],"mappings":";;uhDA0EA,SAASA,EAAUC,EAAIC,EAAOC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAUR,IAAQS,EAAOT,GAC9B,MAAM,IAAIU,UAAWC,EAAQ,8EAA+EX,IAE7G,IAAMY,EAAYX,GACjB,MAAM,IAAIS,UAAWC,EAAQ,QAASV,IAEvC,GAAKY,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAUb,GACf,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAGvC,GADAC,EAAOa,EAAMd,EAAS,GACjBe,EAAYd,EAAM,SACtB,IAAMe,EAAsBf,EAAKC,MAChC,MAAM,IAAIM,UAAWC,EAAQ,QAAS,OAAQR,EAAKC,YAGpDD,EAAKC,KAAOe,EAEbd,EAAOe,EAAOpB,EAAIC,EAAOE,QACN,IAAdA,EAAKkB,OAAiC,IAAdlB,EAAKa,OACjCb,EAAKmB,MAAQjB,EAAKiB,MAErB,MACEjB,EAAOe,EAAOpB,EAAIC,GAClBE,EAAO,CACNC,KAAQe,EACRG,MAASjB,EAAKiB,OA6BhB,OA1BAf,EAAI,EAIJgB,EADAnB,EAAO,CAAA,EACY,OAAQoB,GAC3BD,EAAanB,EAAM,SAAUqB,GAExBtB,GAAQA,EAAKkB,MACjBE,EAAanB,EAAM,OAAQ,MAC3BmB,EAAanB,EAAM,aAAc,MACjCsB,EAAsBtB,EAAM,QAASuB,EAAkB,MAAQC,GAC/DL,EAAanB,EAAM,cAAe,MAClCmB,EAAanB,EAAM,aAAc,QAEjCyB,EAAqBzB,EAAM,OAAQ0B,GACnCD,EAAqBzB,EAAM,aAAc2B,GACzCL,EAAsBtB,EAAM,QAAS4B,EAAUC,GAC/CJ,EAAqBzB,EAAM,cAAe8B,GAC1CL,EAAqBzB,EAAM,aAAc+B,IAE1CZ,EAAanB,EAAM,OAAQC,EAAK+B,MAG3BC,GACJd,EAAanB,EAAMiC,EAAgBC,GAE7BlC,EAQP,SAASoB,IAER,OADAjB,GAAK,EACAD,GAAOC,EAAIJ,EAAKC,KACb,CACNmC,MAAQ,GAGH,CACNC,MAASnC,IACTkC,MAAQ,EAET,CASD,SAASd,EAAKe,GAEb,OADAlC,GAAM,EACDO,UAAUC,OACP,CACN0B,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,EAET,CAQD,SAASD,IACR,OAAOvC,EAAUC,EAAIC,EAAOE,EAC5B,CAQD,SAAS2B,IACR,OAAOzB,EAAK+B,KAAKK,IACjB,CAQD,SAASV,IACR,OAAO1B,EAAK+B,KAAKM,UACjB,CAQD,SAASR,IACR,OAAO7B,EAAK+B,KAAKO,WACjB,CAQD,SAASR,IACR,OAAO9B,EAAK+B,KAAKQ,UACjB,CAQD,SAASZ,IACR,OAAO3B,EAAK+B,KAAKd,KACjB,CASD,SAASW,EAAUY,GAClBxC,EAAK+B,KAAKd,MAAQuB,CAClB,CACF"}